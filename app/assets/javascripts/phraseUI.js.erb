$(document).on('turbolinks:load', function() {
  $('.modal_upload').modaal({
    overlay_opacity: 0.3,
    overlay_close: 'false',
    hide_close: 'true',
    close_text: '決定',
    animation: 'none',
    content_source: '#modal_upload',
    inject_position: '#blog_form'
  });
  $('.btn_duration').modaal({
    overlay_opacity: 0.3,
    overlay_close: 'false',
    hide_close: 'true',
    close_text: '決定',
    animation: 'none',
    content_source: '#modal_duration',
    inject_position: '#blog_form'
  });
  $('.btn_octave').modaal({
    overlay_opacity: 0.3,
    overlay_close: 'false',
    hide_close: 'true',
    close_text: '決定',
    animation: 'none',
    content_source: '#modal_octave',
    inject_position: '#blog_form'
  });
  autosize($('textarea'));
  $('.modal_close').on('click',function(){
    $('.modal_upload').modaal('close');
  });
  $('.submit').on('click',function(){
    $('#blog_form').submit();
  });
  addModal();
  let swiper = new Swiper('.tracks', {
    pagination: {
      el: '.swiper-pagination',
      type: 'progressbar'
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev'
    },
    keyboard: {
      enabled: true,
      onlyInViewport: true
    },
    breakpoints: {
      320: {
        slidesPerView: 1,
      },
      640: {
        slidesPerView: 2
      },
      960: {
        slidesPerView: 3
      },
      1280: {
        slidesPerView: 4
      },
    }
  });
  let edit = new Swiper('.edit_chord', {
    pagination: {
      el: '.swiper-pagination',
      type: 'progressbar'
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev'
    },
    keyboard: {
      enabled: true,
      onlyInViewport: true
    },
    breakpoints: {
      320: {
        slidesPerView: 1,
      },
      640: {
        slidesPerView: 2
      },
      960: {
        slidesPerView: 3
      },
      1280: {
        slidesPerView: 4
      },
    }
  });
  $('#view_track').css('display','none');
  function addModal(){
    $('.tracks .swiper-slide:first-child li .track_block:last-child .tr_del').modaal({
      overlay_opacity: 0.3,
      overlay_close: 'false',
      hide_close: 'true',
      close_text: '決定',
      animation: 'none',
      content_source: '#modal_track_del',
      inject_position: '#blog_form'
    });
  }
  /* Tone.js */
  let chord = ["E4","G4","B4"]
  let c_maj = ["E4","G4","C5"]
  let g7 = ["D4","F4","A4","B4"]
  let cs7 = ["C#4", "F4", "G#4", "B4"]
  let cM7 = ["B4","C4", "E4", "G4"]
  let fsM7 = ["C#4", "F4", "F#4", "A#4"]
  let dsM7 = ["D#4", "G4", "A#4", "D5"]
  let em7 = ["E4", "G4", "B4", "D5"]
  let fM7 = [ "C4", "E4","F4", "A4"]
  let fm7 = ["C4", "D#4","F4", "G#4"]
  let fmM7 = ["C4", "E4","F4", "G#4"]
  let f7 = ["C4", "D#4","F4", "A4"]
  let dm7 = ["D4", "F4", "A4","C4"]
  let dm9 = ["D4", "F4", "A4", "C3", "E4"]


  // let toneData = [
  //   { note: chord, dur: "8n" },
  //   { note: "F4", dur: "4n" },
  //   [{ note: "G4", dur: "8n" }, { note: "G4", dur: "8n" }],
  //   { note: "G4", dur: "4n" },
  //
  //   { note: "E4", dur: "8n" },
  //   [{ note: "G4", dur: "8n" }, { note: "C5", dur: "8n" }],
  //   { note: "C5", dur: "8n" },
  //   [{ note: "C5", dur: "8n" }, { note: "D5", dur: "2n" }],
  //
  //   null,
  //   { note: "E5", dur: "8n" },
  //   { note: "E5", dur: "8n" },
  //   { note: "D5", dur: "2n" },
  //
  //   null,
  //   [{ note: "C5", dur: "8n" },{ note: "A4", dur: "8n" }],
  //   [{ note: "C5", dur: "2n" },{ note: "C5", dur: "2n" }],
  // ];
  let toneData = [
    {'time': '0:0:0', "note": cM7, 'dur': '2n','root':'D4','type':'m9','omit':[],'rotate':1},
    {'time': '0:2:0', "note":fM7, 'dur': '2n'},
    {'time': '1:0:0', "note": g7, 'dur': '2n'},
    {'time': '1:2:0', "note": cM7, 'dur': '2n'},
    // {'time': '0:0:0', 'note': c_maj, 'dur': ' 16n',root:'C△'},
    // {'time': '0:3:0', "note": 'G4', 'dur': '16n',root:'C△'},
    // {'time': '1:2:0', "note": 'E4', 'dur': '16n',root:'C△'},
    // {'time': '2:0:0', "note": 'A4', 'dur': '4n',root:'C△'},
    // {'time': '2:1.5:0', "note": 'B4', 'dur': '4n'},
    // {'time': '2:2.8:0', "note": 'A4', 'dur': '4n'},
    // {'time': '3:0.2:0', "note": 'G#4', 'dur': '4n'},
    // {'time': '3:1.6:0', "note": 'A#4', 'dur': '4n'},
    // {'time': '3:2.8:0', "note": 'G#4', 'dur': '4n'},
    // {'time': '4:0:0', "note": 'G4', 'dur': '16n'},
    // {'time': '4:0.75:0', "note": 'F4', 'dur': '16n'},
    // {'time': '4:1.25:0', "note": 'G4', 'dur': '1n'},
  ];
  // console.log(generateChords("C4","△7","name"));


  /* toneadeの変数にキー、スケール、ノートを設定 */

  // console.log(generateChords("G3","7","name"));
  /* 音名をノートナンバーに変換 */
  function convert_note_to_number(note){
    let key = pickKey(note);
    let oct = pickOct(note);
    if (Number.isNaN(oct)){
      oct = -1;
    }
    let index = gon.keys.findIndex(({name}) => name === key);
    return gon.keys[index]['octave'][oct + 1]
    // let result = x.toString(12);
  }
  /* ノートナンバーを音名に変換 */
  function convert_number_to_note(num){
    let oct;
    let index = gon.keys.findIndex(childSearch);
    function childSearch(element) {
      if (element['octave'].includes(num) == true){
        oct = element['octave'].findIndex(item => item === num) - 1;
        return true;
      }
    }
    return gon.keys[index]['name'] + oct;
  }
  /* オープンボイシング(重複音含む)をクローズド(重複削除)に変換(chord:array, answer:'number'か'name') */
  function convert_closeVoicing(chord,format){
    // Math.floor(数字)
    let bottom = pickKey(chord[0]);
    let number;
    let octave = chord.map(note => pickOct(note));
    let octHash = countDuplicate(octave);
    let keys=[];
    for(let key in octHash)keys.push(key);
    octSortArr = keys.sort(
      function (a,b){
          return octHash[b]-octHash[a];
      }
    );
    let uniq = chord.map(note => pickKey(note)).filter(function (x, i, self) {
        let result = self.indexOf(x) === i;
        return result
    });
    if (uniq.length == chord.length){
      number = uniq.map((note, i) => (convert_note_to_number(note) + (octave[i] + 1) * 12));
    }else{
      number = uniq.map(note => (convert_note_to_number(note) + (Number(octSortArr[0]) + 1) * 12)).sort(
        function(a,b){
          return (a < b ? -1 : 1);
        }
      );
    }

    uniq = number.map(note => convert_number_to_note(note));
    for (let i = 0 ; i < uniq.length ; i++){
      if (pickKey(uniq[0]) == bottom){
        break;
      }else{
        uniq = rotate_chord(uniq,'up');
      }
    }

    switch (format){
      case 'number' :
      result = uniq.map(note => convert_note_to_number(note));
      break;
      case 'name' :
      result = uniq;
      break;
      default:
      result = uniq;
    }
    return result
  }
  /* コード機能を判定() */
  function analyze_chordFunction(toneData){
    console.log(toneData);
  }
  /* コードを探索 (toneData:hash)*/
  function search_chord(toneData){
    let omit = toneData['omit'];
    let rotate = toneData['rotate'];
    let root = pickKey(toneData['root']);
    let bottom = pickKey(toneData['note'][0]);
    let type = toneData['type'];
    let result;
    if (omit.length == 0 && rotate == 0){
      return [root + type,root,type]
    }else{
      result = analyze_chord(toneData['note'],'full');
      // alert(result);
      if (result == false){
        if (root != bottom){
          result = [root + type + '/' + bottom,root,type];
        }else{
          result = [root + type,root,type];
        }
      }
      return result;
    }
  }
  // console.log(search_chord(toneData[0]));

  /* コードを解析(chord:array, format:'type'または'name'もしくは'full') */
  function analyze_chord(chord,format){
    let bufferA = convert_closeVoicing(chord);
    let bufferB,result,root;
    let bottom = pickKey(chord[0]);
    for (let i = 0 ; i < bufferA.length ; i++){
      bufferB = bufferA;
      // root = convert_note_to_number(bufferB[0]);
      // bufferB = bufferB.map(function(note) {
      //   return convert_note_to_number(note) - root
      // });
      root = convert_note_to_number(bufferB[0]);
      bufferB = bufferB.map(function(note) {
        return convert_note_to_number(note) - root
      });
      let index = gon.chords.findIndex(function(element){
        if (element['notes'].join() == bufferB.join()){
          return true;
        }
      });
      // console.log(i,bufferB,index);
      if (index != -1){
        root = pickKey(bufferA[0]);
        switch (format){
          case 'type' :
            result =  gon.chords[index]['type'];
          break;
          case 'name' :
            if (i == 0){
              result =  root + gon.chords[index]['type'];
            }else{
              result =  root + gon.chords[index]['type'] + '/' + bottom;
            }
          break;
          case 'full' :
            if (i == 0){
              result =  [root + gon.chords[index]['type'], root, gon.chords[index]['type']];
            }else{
              result =  [root + gon.chords[index]['type'] + '/' + bottom, root, gon.chords[index]['type']];
            }
          break;
        }
        break;
      }
      else{
        bufferA = rotate_chord(bufferA,'up');
      }
    }
    if (result == undefined){
      result = false;
    }
    return result
  }


  /* 構成音が近いコードを探索 */
  function search_substitute(chode,key){

  }
  /* コードのダイアトニック度を指標化 */
  function diatonic_point(chord,key,scale){


  }
  // console.log(diatonic_point(["E4","G#4","B4"],"C","Major"));

  // console.log(analyze_chord(["F#4","C5","D#5","F#5","A5"],"name"));
  /* ルートを判定(ルートのノートネームを返す。違えばfalse) */
  // function judgRoot(chord){
  //   let name = analyze_chord(chord,'name');
  //   let result;
  //   if (name != false){
  //     name = pickKey(name).split('/')[0];
  //     for (let i = 0 ; i < chord.length ; i++){
  //       if (chord[i].includes(name) == true){
  //         return chord[i];
  //       }
  //     }
  //   }
  //   return false;
  // }

  /* セカンダリドミナントを生成 */
  function generate_secondaryDominant(chord){
    return generate_dominant7(chord,7);
  }
  /* 裏コードを生成 */
  function generate_substituteDominant(chord){
    return generate_dominant7(chord,6);
  }
  /* 代理のドミナントセブンスを生成(chord:array, num:integer半音何個) */
  function generate_dominant7(chord,num){
    let analyze = analyze_chord(chord,'full');
    let root = chord.find(function(element) {
      return element.includes(analyze[1]);
    });
    if (analyze[2] == '7'){
      let secondRoot = (convert_note_to_number(root)) + num;
      return generateChords(secondRoot,"7","name");
    }else{
      return false;
    }
  }
  // V7     7-11-2-5
  // bII7   1-5-8-11
  // bII7   1-5-8-11-3-6
  // IV7     5-9-0-3
  // VI7     11-3-6-9
  // 裏コード　ルートが半音6個違い且つ３度音を共有している
  // IIm7   2-5-9-12
  // bVIm7  8-11-3-6

  /* ノートをルートにコードを生成(root:(number,string),array:コードタイプ,format:'number','name') */
  function generateChords(root,type,format){
    let result,number,name,index,notes,chords = [];
    if (typeof root == 'string'){
      number = convert_note_to_number(root);
      root = pickKey(root);
    }else{
      number = root;
      root = pickKey(convert_number_to_note(root));
    }
    index = gon.chords.findIndex(function(element){
      if (element['type'] == type){
        return true;
      }
    });
    notes = (gon.chords[index]['notes']).map((note, i) => note + number);
    name = root + gon.chords[index]['type'];
    if (format == 'name'){
      result = [notes.map((note, i) => convert_number_to_note(note)),name];
    }else{
      result = [notes,name];
    }
    return result
  }

  function omitNote(chord){

  }
  // console.log(generate_substituteDominant(["C3","E3","G3","A#3"]));
  // console.log(search_secondaryDominant(["C4","E4","G4"]));


  /* コードを転回(chord:array) */
  function rotate_chord(chord,direction){
    let result;
    switch (direction){
      case 'up' :
      chord.push(octaveUp(chord[0]));
      chord.shift();
      break;
      case 'down' :
      chord.unshift(octaveDown(chord.slice(-1)[0]));
      chord.pop();
      break;
    }
    return chord
  }
  /* ノートをオクターブアップ(note:string) */
  function octaveUp(note){
    return pickKey(note) + (pickOct(note) + 1);
  }
  /* ノートをオクターブダウン(note:string) */
  function octaveDown(note){
    return pickKey(note) + (pickOct(note) - 1);
  }
  /* 音階名をピックアップ (note:string)*/
  function pickKey(note){
    return note.replace(/[0-9,-]/g, "")
  }
  /* オクターブをピックアップ(note:string) */
  function pickOct(note){
    let oct = note.replace(/[^0-9,-]/g, "")
    return parseInt(oct, 10)
  }
  /* 配列の重複をカウント */
  function countDuplicate(arr){
    return arr.reduce(function(counts, key){
      counts[key] = (counts[key])? counts[key] + 1 : 1 ;
      return counts;
    }, {});
  };

  function Compare(a,b){
    return arr[a]-arr[b];
  }
  /* 大文字を判断（大文字:true） */
  const isUpperCase = c => {
    return /^[A-Z]+$/g.test(c)
  }

  // const synth = new Tone.MembraneSynth().toMaster();
  const synth = new Tone.PolySynth(6, Tone.Synth, {
    oscillator : {
  		type : "square"
  	}
  }).toMaster();
  // const seq = new Tone.Sequence((time, { note, dur }) => {
  //   synth.triggerAttackRelease(note, dur, time);
  // }, toneData, "4n").start(0);
  function addMelody(time, { note, dur }) {
    synth.triggerAttackRelease(note, dur, time);
  }
  var sequence
  let playing = false;
  Tone.Transport.bpm.value = 120;

  $(document).on('click', '.play', function (){
    if (!playing) {
      Tone.Transport.cancel();
      sequence = new Tone.Part(addMelody, toneData).start(0);
      Tone.Transport.start();
      playing = true;
    } else {
      Tone.Transport.stop();
      playing = false;
    }
  });
  /* UI */
  $(function(){
    $(document).on('click', '.test_edit', function (){
      let GM=["G3","B3","D4"];
      let Em=["E3","G3","B3"];
      toneData = [
        {'time': '0:0:0', 'note': ["C4","E4","G4"], 'dur': '4n'},
        {'time': '0:1:0', 'note': ["G3","B3","D4"], 'dur': '4n'},
        {'time': '0:2:0', 'note': ["A3","C4","E4"], 'dur': '4n'},
        {'time': '0:3:0', 'note': Em, 'dur': '4n'},
        {'time': '1:0:0', 'note': ["F3","A3","C3"], 'dur': '4n'},
        {'time': '1:1:0', 'note': ["C3","E3","G3"], 'dur': '4n'},
        {'time': '1:2:0', 'note': ["F3","A3","C3"], 'dur': '4n'},
        {'time': '1:3:0', 'note': GM, 'dur': '4n'},
      ];
    });
    // console.log(toneData);
    // alert(gon.tracks[0]["name"]);
    if( gon.page_name == "Edit Phrase" || gon.page_name == "New Phrase"){
      let phrase_key, key, phrase_scale, scale, diatonicMap, beat, chords, octave;
      beat = $('#blog_phrase_attributes_beat option:selected').text();
      phrase_key = $('#blog_phrase_attributes_key option:selected').text();
      phrase_scale = $('#blog_phrase_attributes_scale option:selected').text();
      project_profile(phrase_key,phrase_scale,4);
      generateDiatonicChordBtn(phrase_key,scale);

      function project_profile(key,sc,octave){
        tonalData = gon.keys.find(function(element) {
          return element['name'] == key;
        });
        scaleData = gon.scales.find(function(element) {
          return element['name'] == sc;
        });
        scale = gon.notes.filter(note => note['scale_id'] == scaleData['id']);
        key = {'name':key, 'number':tonalData['octave'][octave + 1]}
        scale.map(array => array['number'] = key['number'] + array['interval']);
        // test = notesData.find((note) => note.degree === 'III');
      }
      let track_num = 1;
      let last_measure = 4;

      /* Editロード時、UIにトラック情報反映 */
      if( gon.page_name == "Edit Phrase"){
        /* トラック生成 */
        if ( gon.tracks.length >= 2 ){
          track_num = gon.tracks.length;
          for (let i = 1 ; i < track_num ; i++){
            addTrack(i);
            addModal();
          }
        }
        /* トラックにデータ反映 */
        gon.tracks.forEach(function(val,index,ar){
          $('.tr_name').eq(index).val(val["name"]);
          selectGenerate($('.tr_type').eq(index), gon.tr_types, gon.tracks[index]["tr_type"]);
          selectGenerate($('.inst_type').eq(index), gon.inst_categorys);
          // $("select option").attr("selected", true);
        });
      }else{
        selectGenerate($('.tr_type'),gon.tr_types,1);
        selectGenerate($('.tracks .swiper-slide:first-child li .track_block:last-child .inst_type'),gon.inst_categorys);
      }

      /* select optionにトラックタイプを挿入 */
      // selectGenerate($('.tr_type'),gon.tr_types);

      /* UIのbpmをTone.jsに反映 */
      // $(document).on('change', '#blog_phrase_attributes_bpm', function(){
      //   Tone.Transport.bpm.value = $(this).val();
      // });
      /* master setting の変更を取得 */
      $(document).on('change', '#phrase_inputs select', function(){
        let _this = $(this);
        switch (true){
          case _this.attr('id') == 'blog_phrase_attributes_bpm' :
            Tone.Transport.bpm.value = $(this).val();
            break;
          case _this.attr('id') == 'blog_phrase_attributes_beat' :
            beat = gon.beats.find(item => item['id'] == $(this).val())['name'];
            break;
          case _this.attr('id') == 'blog_phrase_attributes_key' :
            phrase_key = gon.keys.find(item => item['id'] == $(this).val())['name'];
            project_profile(phrase_key,phrase_scale,4);
            generateDiatonicChordBtn(phrase_key,scale);
            break;
          case _this.attr('id') == 'blog_phrase_attributes_scale' :
            phrase_scale = gon.scales.find(item => item['id'] == $(this).val())['name'];
            project_profile(phrase_key,phrase_scale,4);
            generateDiatonicChordBtn(phrase_key,scale);
            break;
        }
        // beat = $('#blog_phrase_attributes_beat option:selected').text();
      });

      /* UIのinput情報をformに反映 */
      $(document).on('change', 'input.UI,select.UI', function(){
        let _this = $(this);
        let num,eq, parent;
        switch (true){
          case _this.hasClass('tr_name') == true :
            num = (tr_number(_this.parent()) - 1);
            parent = $('.track_form').eq(num);
            eq = 1 ;
            break;
          case _this.hasClass('tr_type') == true :
            num = (tr_number(_this.parent().parent()) - 1);
            parent = $('.track_form').eq(num);
            eq = 2 ;
            $('.track_type').eq(num).text($('option:selected',this).text());
            test = $('.track_block').eq(num + 1).attr('class');
            break;
          case _this.hasClass('tr_instrument') == true :
            num = (tr_number(_this.parent()) - 1);
            parent = $('.track_form').eq(num);
            eq = 3 ;
            break;
          case _this.hasClass('tr_data') == true :
            num = (tr_number(_this.parent()) - 1);
            parent = $('.track_form').eq(num);
            eq = 4 ;
            break;
        }
        $('input:nth-child(' + eq +')',parent).val(_this.val());
      });

      // alert(gon.phrase.scale);
      /* トラック追加 */

      /* トラック名のフォーム反映 */
      // $('input[type="text"]').keyup(function() {
      //
      //   //入力したvalue値を変数に格納
      //   var val = $(this).val();
      //
      //   //選択したvalue値をp要素に出力
      //   $('p').text(val);
      // });

      /* トラック追加 */
      $('.add_track').on('click',function(){
        addTrack(track_num);
        track_num += 1;
        selectGenerate($('.tracks .swiper-slide:first-child li .track_block:last-child .tr_type'),gon.tr_types);
        selectGenerate($('.tracks .swiper-slide:first-child li .track_block:last-child .inst_type'),gon.inst_categorys);
        addModal();
      });
      /* 小節追加 */
      $('.add_measure').on('click',function(){
        // copy = $('.swiper-slide:last-child');
        // $('.swiper-slide:last-child').clone(true).appendTo('.tracks');
        let last = last_measure;
        swiper.appendSlide($('.tracks .swiper-slide:last-child').clone(true));
        $('.tracks .swiper-slide:last-child .measure').each(function(index, element){
          $(element).text(last += 1);
        });
        last = last_measure;
        $('.tracks .swiper-slide:last-child .track_block').empty();
        edit.appendSlide($('#edit_track_chord .swiper-slide:last-child').clone(true));
        $('#edit_track_chord .swiper-slide:last-child .edit_m').each(function(index, element){
          $(element).text(last += 1);
        });
        last_measure = last;
      });
      /* トラック削除確認 */
      $(document).on('click', '.tr_del', function (){
        let tr = tr_number($(this));
        $('.track_del p').text('Track ' + tr + ' を削除しますか？');
        $('.del_accept:last-child').addClass('delete_' + tr);
      });
      $(document).on('click', '.del_accept', function (){
        let tr = tr_number($(this));
        $(".h_" + tr).remove();
        $(".tracks .swiper-slide li .track_block.tr_" + tr).remove();
      });

      /* 視聴トラック　ソロ or オール */
      $(document).on('click', '.btn_monitor', function (){
        _this = $(this);
        if (_this.parent().attr("class") == "track_edit_header"){
          edit_track = _this.parent().attr("id");
          if(_this.text() == "S" ){
            $('.btn_monitor').addClass('btn_active');
            _this.text('ALL');
          }else{
            $('.btn_monitor').removeClass('btn_active');
            _this.addClass('btn_active');
            $('.track_header.h_' + edit_track + ' .btn_monitor' ).addClass('btn_active');
            _this.text('S');
          }
        }
        else{
          if(_this.hasClass('btn_all')){
            $('.btn_monitor').addClass('btn_active');
          }else{
            $('.btn_monitor').removeClass('btn_active');
            _this.addClass('btn_active');
          }
        }
      });
      /* トラックエディット遷移 */
      $(document).on('click', '.track_block.chord', function (){
        if ($(this).siblings('.measure').text() != 'Track Setting'){
          $('#view_blog').removeClass('view_on');
          $('#view_track').addClass('view_on');
          tr = $(this).attr('class').replace(/[^0-9]/g, "");
          $('.track_edit_header').attr('id','tr_' + tr);
          $('.track_edit_header h3').text('TR:' + tr);
          $('.content_wrapper').css('background','rgba(35, 41, 45, 1)');
        }
      });
      $(document).on('click', '.view_close', function (){
        $('#view_track').removeClass('view_on');
        $('#view_blog').addClass('view_on');
        $('.content_wrapper').css('background','#ffffff');
      });
      /* 入力ブロックセレクト */
      $(document).on('click', '.edit_b', function (){
        if($(this).hasClass('select_track')){
          $('.edit_b').removeClass('select_track');
        }else{
          $('.edit_b').removeClass('select_track');
          $(this).addClass('select_track');
          test = $(this).siblings('.edit_m').text();
          var index = $('li .edit_b').index(this);
          beat.split('/');
          alert(beat[0]);
        }
      });

      function addTrack(tr){
        last_pos = $('.tr_guide li').height();
        tr += 1;
        $('.track_header:last').after('<div class="track_header h_' + tr + '" id="h_' + tr + '"><h3>TR : '+ tr + '</h3><div class="track_type"></div><input type="text" placeholder="track name" class="tr_name UI" maxlength="24"><a class=" btn_monitor btn_active">S</a></div>');
        $('.tracks .swiper-slide li').append('<div class="track_block tr_' + tr + '"></div>');
        $('.tracks .swiper-slide:first-child li .track_block:last-child').append('<div class="track_block_row"><span>track type</span><select class="tr_type UI"></select><p><a class="tr_del del_' + tr + '">×</a></p></div><div class="track_block_row"><span>patch category</span><select class="inst_type search"></select></div><div class="track_block_row"><span>patch</span><select class="preset search"></select></div>');
        $('#h_'+ tr ).css('top',(last_pos + 4));
        $('#add_tr_form a').click();
      }
      function tr_number(element){
        result = element.attr('class').replace(/[^0-9]/g, "");
        return result
      }
      function selectGenerate(element,array,selected) {
        array.forEach(function(val,index,ar){
          if (index == (selected - 1)){
            element.append('<option value="' + val[1] + '" selected="selected">' + val[0] + '</option>');
          }else{

            element.append('<option value="' + val[1] + '">' + val[0] + '</option>');
          }
        });
      }
    }
    /*コードエディット*/
    function editAddMeasure(){
      let edit = '<div class="swiper-slide"><ul class="tr_guide"><li><div class="edit_m">1</div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div></li><li><div class="edit_m">2</div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div></li><li><div class="edit_m">3</div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div></li><li><div class="edit_m">4</div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div><div class="edit_b"></div></li></ul></div>';

    }
    function generateDiatonicChordBtn(key,scale){
      chords = [];
      $('#list_diatonic ul').empty();
      scale.map(function(array) {
        let chord = gon.chords[array['triad_id'] - 1];
        $('#list_diatonic ul').append('<li><a class="func_' + array['function'] + '">' + array['degree'] + " " + chord['type'] + '</a></li>');
        chords.push({'id':chords.length + 1, 'root':array['number'], 'notes':chord['notes']});
      });
      scale.map(function(array) {
        let chord = gon.chords[array['seventh_id'] - 1];
        $('#list_diatonic ul').append('<li><a class="func_' + array['function'] + '">' + array['degree'] + " " + chord['type'] + '</a></li>');
        chords.push({'id':chords.length + 1, 'root':array['number'], 'notes':chord['notes']});
      });
      // console.log(chords);
    }
    function generateChordBtn(key,array,selected) {

    }
    $(document).on('click', '.btn_duration', function (){
      addModal();
    });
    $(document).on('click', '.btn_octave', function (){
      addModal();
    });
  });
})
